{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomValidationService {\n  constructor(http) {\n    this.http = http;\n  }\n  passwordMatchValidator(password, confirmPassword) {\n    return formGroup => {\n      const passwordControl = formGroup.controls[password];\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\n      if (!passwordControl || !confirmPasswordControl) {\n        return null;\n      }\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors.passwordMismatch) {\n        return null;\n      }\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({\n          passwordMismatch: true\n        });\n      } else {\n        confirmPasswordControl.setErrors(null);\n      }\n    };\n  }\n  validateUsernameNotTaken(control) {\n    return this.checkUsernameNotTaken(control.value).pipe(map(res => {\n      return res ? null : {\n        usernameTaken: true\n      };\n    }));\n  }\n  //Fake API call -- You can have this in another service\n  checkUsernameNotTaken(username) {\n    return this.http.get(\"assets/fakedb.json\").pipe(map(usernameList => usernameList.filter(user => user.username === username)), map(users => !users.length));\n  }\n  static #_ = this.ɵfac = function CustomValidationService_Factory(t) {\n    return new (t || CustomValidationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomValidationService,\n    factory: CustomValidationService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["map","CustomValidationService","constructor","http","passwordMatchValidator","password","confirmPassword","formGroup","passwordControl","controls","confirmPasswordControl","errors","passwordMismatch","value","setErrors","validateUsernameNotTaken","control","checkUsernameNotTaken","pipe","res","usernameTaken","username","get","usernameList","filter","user","users","length","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/greg/Projects/angular-reactive-forms/src/app/services/custom-validation.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { FormGroup, AbstractControl } from \"@angular/forms\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class CustomValidationService {\n  constructor(private http: HttpClient) {}\n\n  passwordMatchValidator(password: string, confirmPassword: string) {\n    return (formGroup: FormGroup) => {\n      const passwordControl = formGroup.controls[password];\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\n\n      if (!passwordControl || !confirmPasswordControl) {\n        return null;\n      }\n\n      if (\n        confirmPasswordControl.errors &&\n        !confirmPasswordControl.errors.passwordMismatch\n      ) {\n        return null;\n      }\n\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({ passwordMismatch: true });\n      } else {\n        confirmPasswordControl.setErrors(null);\n      }\n    };\n  }\n\n  validateUsernameNotTaken(control: AbstractControl) {\n    return this.checkUsernameNotTaken(control.value).pipe(\n      map(res => {\n        return res ? null : { usernameTaken: true };\n      })\n    );\n  }\n\n  //Fake API call -- You can have this in another service\n  checkUsernameNotTaken(username: string): Observable<boolean> {\n    return this.http.get(\"assets/fakedb.json\").pipe(\n      map((usernameList: Array<any>) =>\n        usernameList.filter(user => user.username === username)\n      ),\n      map(users => !users.length)\n    );\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,uBAAuB;EAClCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,sBAAsBA,CAACC,QAAgB,EAAEC,eAAuB;IAC9D,OAAQC,SAAoB,IAAI;MAC9B,MAAMC,eAAe,GAAGD,SAAS,CAACE,QAAQ,CAACJ,QAAQ,CAAC;MACpD,MAAMK,sBAAsB,GAAGH,SAAS,CAACE,QAAQ,CAACH,eAAe,CAAC;MAElE,IAAI,CAACE,eAAe,IAAI,CAACE,sBAAsB,EAAE;QAC/C,OAAO,IAAI;;MAGb,IACEA,sBAAsB,CAACC,MAAM,IAC7B,CAACD,sBAAsB,CAACC,MAAM,CAACC,gBAAgB,EAC/C;QACA,OAAO,IAAI;;MAGb,IAAIJ,eAAe,CAACK,KAAK,KAAKH,sBAAsB,CAACG,KAAK,EAAE;QAC1DH,sBAAsB,CAACI,SAAS,CAAC;UAAEF,gBAAgB,EAAE;QAAI,CAAE,CAAC;OAC7D,MAAM;QACLF,sBAAsB,CAACI,SAAS,CAAC,IAAI,CAAC;;IAE1C,CAAC;EACH;EAEAC,wBAAwBA,CAACC,OAAwB;IAC/C,OAAO,IAAI,CAACC,qBAAqB,CAACD,OAAO,CAACH,KAAK,CAAC,CAACK,IAAI,CACnDlB,GAAG,CAACmB,GAAG,IAAG;MACR,OAAOA,GAAG,GAAG,IAAI,GAAG;QAAEC,aAAa,EAAE;MAAI,CAAE;IAC7C,CAAC,CAAC,CACH;EACH;EAEA;EACAH,qBAAqBA,CAACI,QAAgB;IACpC,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAC,oBAAoB,CAAC,CAACJ,IAAI,CAC7ClB,GAAG,CAAEuB,YAAwB,IAC3BA,YAAY,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CAAC,CACxD,EACDrB,GAAG,CAAC0B,KAAK,IAAI,CAACA,KAAK,CAACC,MAAM,CAAC,CAC5B;EACH;EAAC,QAAAC,CAAA,G;qBA3CU3B,uBAAuB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBhC,uBAAuB;IAAAiC,OAAA,EAAvBjC,uBAAuB,CAAAkC,IAAA;IAAAC,UAAA,EAFtB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}